
ThiredTaskAUTOSAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000f0a  00000f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008a  0080008a  00000fc8  2**0
                  ALLOC
  3 .stab         000010d4  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008d2  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1a 06 	call	0xc34	; 0xc34 <main>
  8a:	0c 94 83 07 	jmp	0xf06	; 0xf06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_InitPin>:




static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2c 97       	sbiw	r28, 0x0c	; 12
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	86 95       	lsr	r24
  ae:	86 95       	lsr	r24
  b0:	86 95       	lsr	r24
  b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
  b4:	8b 81       	ldd	r24, Y+3	; 0x03
  b6:	87 70       	andi	r24, 0x07	; 7
  b8:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	3c 87       	std	Y+12, r19	; 0x0c
  c2:	2b 87       	std	Y+11, r18	; 0x0b
  c4:	8b 85       	ldd	r24, Y+11	; 0x0b
  c6:	9c 85       	ldd	r25, Y+12	; 0x0c
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	91 05       	cpc	r25, r1
  cc:	09 f4       	brne	.+2      	; 0xd0 <DIO_InitPin+0x3e>
  ce:	ca c0       	rjmp	.+404    	; 0x264 <DIO_InitPin+0x1d2>
  d0:	2b 85       	ldd	r18, Y+11	; 0x0b
  d2:	3c 85       	ldd	r19, Y+12	; 0x0c
  d4:	29 30       	cpi	r18, 0x09	; 9
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <DIO_InitPin+0x4a>
  da:	86 c1       	rjmp	.+780    	; 0x3e8 <DIO_InitPin+0x356>
  dc:	8b 85       	ldd	r24, Y+11	; 0x0b
  de:	9c 85       	ldd	r25, Y+12	; 0x0c
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	91 05       	cpc	r25, r1
  e4:	09 f0       	breq	.+2      	; 0xe8 <DIO_InitPin+0x56>
  e6:	3d c2       	rjmp	.+1146   	; 0x562 <DIO_InitPin+0x4d0>
	{
		case OUTPUT:
		switch(port)
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	3a 87       	std	Y+10, r19	; 0x0a
  f0:	29 87       	std	Y+9, r18	; 0x09
  f2:	89 85       	ldd	r24, Y+9	; 0x09
  f4:	9a 85       	ldd	r25, Y+10	; 0x0a
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <DIO_InitPin+0x6c>
  fc:	3e c0       	rjmp	.+124    	; 0x17a <DIO_InitPin+0xe8>
  fe:	29 85       	ldd	r18, Y+9	; 0x09
 100:	3a 85       	ldd	r19, Y+10	; 0x0a
 102:	22 30       	cpi	r18, 0x02	; 2
 104:	31 05       	cpc	r19, r1
 106:	2c f4       	brge	.+10     	; 0x112 <DIO_InitPin+0x80>
 108:	89 85       	ldd	r24, Y+9	; 0x09
 10a:	9a 85       	ldd	r25, Y+10	; 0x0a
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	71 f0       	breq	.+28     	; 0x12c <DIO_InitPin+0x9a>
 110:	28 c2       	rjmp	.+1104   	; 0x562 <DIO_InitPin+0x4d0>
 112:	29 85       	ldd	r18, Y+9	; 0x09
 114:	3a 85       	ldd	r19, Y+10	; 0x0a
 116:	22 30       	cpi	r18, 0x02	; 2
 118:	31 05       	cpc	r19, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <DIO_InitPin+0x8c>
 11c:	55 c0       	rjmp	.+170    	; 0x1c8 <DIO_InitPin+0x136>
 11e:	89 85       	ldd	r24, Y+9	; 0x09
 120:	9a 85       	ldd	r25, Y+10	; 0x0a
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	91 05       	cpc	r25, r1
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_InitPin+0x98>
 128:	76 c0       	rjmp	.+236    	; 0x216 <DIO_InitPin+0x184>
 12a:	1b c2       	rjmp	.+1078   	; 0x562 <DIO_InitPin+0x4d0>
		{
		case PA:
			SET_BIT(DDRA,pin_num);
 12c:	aa e3       	ldi	r26, 0x3A	; 58
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_InitPin+0xb6>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_InitPin+0xb2>
 14c:	84 2b       	or	r24, r20
 14e:	8c 93       	st	X, r24
			CLR_BIT(PORTA, pin_num);
 150:	ab e3       	ldi	r26, 0x3B	; 59
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	eb e3       	ldi	r30, 0x3B	; 59
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 2e       	mov	r0, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_InitPin+0xdc>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_InitPin+0xd8>
 172:	80 95       	com	r24
 174:	84 23       	and	r24, r20
 176:	8c 93       	st	X, r24
 178:	f4 c1       	rjmp	.+1000   	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PB: 
			SET_BIT(DDRB,pin_num);
 17a:	a7 e3       	ldi	r26, 0x37	; 55
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e7 e3       	ldi	r30, 0x37	; 55
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_InitPin+0x104>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	2a 95       	dec	r18
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_InitPin+0x100>
 19a:	84 2b       	or	r24, r20
 19c:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
 19e:	a8 e3       	ldi	r26, 0x38	; 56
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e8 e3       	ldi	r30, 0x38	; 56
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_InitPin+0x12a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_InitPin+0x126>
 1c0:	80 95       	com	r24
 1c2:	84 23       	and	r24, r20
 1c4:	8c 93       	st	X, r24
 1c6:	cd c1       	rjmp	.+922    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
 1c8:	a4 e3       	ldi	r26, 0x34	; 52
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e4 e3       	ldi	r30, 0x34	; 52
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_InitPin+0x152>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_InitPin+0x14e>
 1e8:	84 2b       	or	r24, r20
 1ea:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
 1ec:	a5 e3       	ldi	r26, 0x35	; 53
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	e5 e3       	ldi	r30, 0x35	; 53
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	48 2f       	mov	r20, r24
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 2e       	mov	r0, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_InitPin+0x178>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_InitPin+0x174>
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	8c 93       	st	X, r24
 214:	a6 c1       	rjmp	.+844    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
 216:	a1 e3       	ldi	r26, 0x31	; 49
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e1 e3       	ldi	r30, 0x31	; 49
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_InitPin+0x1a0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_InitPin+0x19c>
 236:	84 2b       	or	r24, r20
 238:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
 23a:	a2 e3       	ldi	r26, 0x32	; 50
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e2 e3       	ldi	r30, 0x32	; 50
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_InitPin+0x1c6>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_InitPin+0x1c2>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	7f c1       	rjmp	.+766    	; 0x562 <DIO_InitPin+0x4d0>
			break;
		}
		break;
		case INFREE:
		switch(port)
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	38 87       	std	Y+8, r19	; 0x08
 26c:	2f 83       	std	Y+7, r18	; 0x07
 26e:	8f 81       	ldd	r24, Y+7	; 0x07
 270:	98 85       	ldd	r25, Y+8	; 0x08
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	09 f4       	brne	.+2      	; 0x27a <DIO_InitPin+0x1e8>
 278:	3f c0       	rjmp	.+126    	; 0x2f8 <DIO_InitPin+0x266>
 27a:	2f 81       	ldd	r18, Y+7	; 0x07
 27c:	38 85       	ldd	r19, Y+8	; 0x08
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	2c f4       	brge	.+10     	; 0x28e <DIO_InitPin+0x1fc>
 284:	8f 81       	ldd	r24, Y+7	; 0x07
 286:	98 85       	ldd	r25, Y+8	; 0x08
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f0       	breq	.+28     	; 0x2a8 <DIO_InitPin+0x216>
 28c:	6a c1       	rjmp	.+724    	; 0x562 <DIO_InitPin+0x4d0>
 28e:	2f 81       	ldd	r18, Y+7	; 0x07
 290:	38 85       	ldd	r19, Y+8	; 0x08
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	09 f4       	brne	.+2      	; 0x29a <DIO_InitPin+0x208>
 298:	57 c0       	rjmp	.+174    	; 0x348 <DIO_InitPin+0x2b6>
 29a:	8f 81       	ldd	r24, Y+7	; 0x07
 29c:	98 85       	ldd	r25, Y+8	; 0x08
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_InitPin+0x214>
 2a4:	79 c0       	rjmp	.+242    	; 0x398 <DIO_InitPin+0x306>
 2a6:	5d c1       	rjmp	.+698    	; 0x562 <DIO_InitPin+0x4d0>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 2a8:	aa e3       	ldi	r26, 0x3A	; 58
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	ea e3       	ldi	r30, 0x3A	; 58
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	48 2f       	mov	r20, r24
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_InitPin+0x232>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	2a 95       	dec	r18
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_InitPin+0x22e>
 2c8:	80 95       	com	r24
 2ca:	84 23       	and	r24, r20
 2cc:	8c 93       	st	X, r24
			CLR_BIT(PORTA, pin_num);
 2ce:	ab e3       	ldi	r26, 0x3B	; 59
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	eb e3       	ldi	r30, 0x3B	; 59
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_InitPin+0x25a>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_InitPin+0x256>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	35 c1       	rjmp	.+618    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
 2f8:	a7 e3       	ldi	r26, 0x37	; 55
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e7 e3       	ldi	r30, 0x37	; 55
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	48 2f       	mov	r20, r24
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	28 2f       	mov	r18, r24
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_InitPin+0x282>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	2a 95       	dec	r18
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_InitPin+0x27e>
 318:	80 95       	com	r24
 31a:	84 23       	and	r24, r20
 31c:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_InitPin+0x2aa>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_InitPin+0x2a6>
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	8c 93       	st	X, r24
 346:	0d c1       	rjmp	.+538    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
 348:	a4 e3       	ldi	r26, 0x34	; 52
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e4 e3       	ldi	r30, 0x34	; 52
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	48 2f       	mov	r20, r24
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	28 2f       	mov	r18, r24
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_InitPin+0x2d2>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	2a 95       	dec	r18
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_InitPin+0x2ce>
 368:	80 95       	com	r24
 36a:	84 23       	and	r24, r20
 36c:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
 36e:	a5 e3       	ldi	r26, 0x35	; 53
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e5 e3       	ldi	r30, 0x35	; 53
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_InitPin+0x2fa>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_InitPin+0x2f6>
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	8c 93       	st	X, r24
 396:	e5 c0       	rjmp	.+458    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
 398:	a1 e3       	ldi	r26, 0x31	; 49
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e1 e3       	ldi	r30, 0x31	; 49
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_InitPin+0x322>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	2a 95       	dec	r18
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_InitPin+0x31e>
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
 3be:	a2 e3       	ldi	r26, 0x32	; 50
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e2 e3       	ldi	r30, 0x32	; 50
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	48 2f       	mov	r20, r24
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 2e       	mov	r0, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_InitPin+0x34a>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_InitPin+0x346>
 3e0:	80 95       	com	r24
 3e2:	84 23       	and	r24, r20
 3e4:	8c 93       	st	X, r24
 3e6:	bd c0       	rjmp	.+378    	; 0x562 <DIO_InitPin+0x4d0>
			break;
		}
		break;
		
		case INPULL:
		switch(port)
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	3e 83       	std	Y+6, r19	; 0x06
 3f0:	2d 83       	std	Y+5, r18	; 0x05
 3f2:	8d 81       	ldd	r24, Y+5	; 0x05
 3f4:	9e 81       	ldd	r25, Y+6	; 0x06
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	91 05       	cpc	r25, r1
 3fa:	09 f4       	brne	.+2      	; 0x3fe <DIO_InitPin+0x36c>
 3fc:	3e c0       	rjmp	.+124    	; 0x47a <DIO_InitPin+0x3e8>
 3fe:	2d 81       	ldd	r18, Y+5	; 0x05
 400:	3e 81       	ldd	r19, Y+6	; 0x06
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	31 05       	cpc	r19, r1
 406:	2c f4       	brge	.+10     	; 0x412 <DIO_InitPin+0x380>
 408:	8d 81       	ldd	r24, Y+5	; 0x05
 40a:	9e 81       	ldd	r25, Y+6	; 0x06
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	71 f0       	breq	.+28     	; 0x42c <DIO_InitPin+0x39a>
 410:	a8 c0       	rjmp	.+336    	; 0x562 <DIO_InitPin+0x4d0>
 412:	2d 81       	ldd	r18, Y+5	; 0x05
 414:	3e 81       	ldd	r19, Y+6	; 0x06
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	31 05       	cpc	r19, r1
 41a:	09 f4       	brne	.+2      	; 0x41e <DIO_InitPin+0x38c>
 41c:	55 c0       	rjmp	.+170    	; 0x4c8 <DIO_InitPin+0x436>
 41e:	8d 81       	ldd	r24, Y+5	; 0x05
 420:	9e 81       	ldd	r25, Y+6	; 0x06
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	91 05       	cpc	r25, r1
 426:	09 f4       	brne	.+2      	; 0x42a <DIO_InitPin+0x398>
 428:	76 c0       	rjmp	.+236    	; 0x516 <DIO_InitPin+0x484>
 42a:	9b c0       	rjmp	.+310    	; 0x562 <DIO_InitPin+0x4d0>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 42c:	aa e3       	ldi	r26, 0x3A	; 58
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	ea e3       	ldi	r30, 0x3A	; 58
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_InitPin+0x3b6>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	2a 95       	dec	r18
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_InitPin+0x3b2>
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	8c 93       	st	X, r24
			SET_BIT(PORTA, pin_num);
 452:	ab e3       	ldi	r26, 0x3B	; 59
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	eb e3       	ldi	r30, 0x3B	; 59
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_InitPin+0x3de>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_InitPin+0x3da>
 474:	84 2b       	or	r24, r20
 476:	8c 93       	st	X, r24
 478:	74 c0       	rjmp	.+232    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
 47a:	a7 e3       	ldi	r26, 0x37	; 55
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e7 e3       	ldi	r30, 0x37	; 55
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_InitPin+0x404>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	2a 95       	dec	r18
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_InitPin+0x400>
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
 4a0:	a8 e3       	ldi	r26, 0x38	; 56
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e8 e3       	ldi	r30, 0x38	; 56
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 2e       	mov	r0, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_InitPin+0x42c>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_InitPin+0x428>
 4c2:	84 2b       	or	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	4d c0       	rjmp	.+154    	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
 4c8:	a4 e3       	ldi	r26, 0x34	; 52
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e4 e3       	ldi	r30, 0x34	; 52
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_InitPin+0x452>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_InitPin+0x44e>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
 4ee:	a5 e3       	ldi	r26, 0x35	; 53
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e5 e3       	ldi	r30, 0x35	; 53
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_InitPin+0x47a>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_InitPin+0x476>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
 514:	26 c0       	rjmp	.+76     	; 0x562 <DIO_InitPin+0x4d0>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
 516:	a1 e3       	ldi	r26, 0x31	; 49
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e1 e3       	ldi	r30, 0x31	; 49
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_InitPin+0x4a0>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	2a 95       	dec	r18
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_InitPin+0x49c>
 536:	80 95       	com	r24
 538:	84 23       	and	r24, r20
 53a:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
 53c:	a2 e3       	ldi	r26, 0x32	; 50
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e2 e3       	ldi	r30, 0x32	; 50
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 2e       	mov	r0, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_InitPin+0x4c8>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_InitPin+0x4c4>
 55e:	84 2b       	or	r24, r20
 560:	8c 93       	st	X, r24
			break;
		}
		break;
	}
	
}
 562:	2c 96       	adiw	r28, 0x0c	; 12
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	f8 94       	cli
 568:	de bf       	out	0x3e, r29	; 62
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	08 95       	ret

00000574 <DIO_WritePin>:



void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
 574:	df 93       	push	r29
 576:	cf 93       	push	r28
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	28 97       	sbiw	r28, 0x08	; 8
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	8b 83       	std	Y+3, r24	; 0x03
 58a:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	86 95       	lsr	r24
 590:	86 95       	lsr	r24
 592:	86 95       	lsr	r24
 594:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	87 70       	andi	r24, 0x07	; 7
 59a:	89 83       	std	Y+1, r24	; 0x01
	
	if (volt==HIGH)
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <DIO_WritePin+0x30>
 5a2:	6f c0       	rjmp	.+222    	; 0x682 <DIO_WritePin+0x10e>
	{
		switch(port)
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	38 87       	std	Y+8, r19	; 0x08
 5ac:	2f 83       	std	Y+7, r18	; 0x07
 5ae:	8f 81       	ldd	r24, Y+7	; 0x07
 5b0:	98 85       	ldd	r25, Y+8	; 0x08
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	91 05       	cpc	r25, r1
 5b6:	49 f1       	breq	.+82     	; 0x60a <DIO_WritePin+0x96>
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	22 30       	cpi	r18, 0x02	; 2
 5be:	31 05       	cpc	r19, r1
 5c0:	2c f4       	brge	.+10     	; 0x5cc <DIO_WritePin+0x58>
 5c2:	8f 81       	ldd	r24, Y+7	; 0x07
 5c4:	98 85       	ldd	r25, Y+8	; 0x08
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <DIO_WritePin+0x6e>
 5ca:	d2 c0       	rjmp	.+420    	; 0x770 <DIO_WritePin+0x1fc>
 5cc:	2f 81       	ldd	r18, Y+7	; 0x07
 5ce:	38 85       	ldd	r19, Y+8	; 0x08
 5d0:	22 30       	cpi	r18, 0x02	; 2
 5d2:	31 05       	cpc	r19, r1
 5d4:	71 f1       	breq	.+92     	; 0x632 <DIO_WritePin+0xbe>
 5d6:	8f 81       	ldd	r24, Y+7	; 0x07
 5d8:	98 85       	ldd	r25, Y+8	; 0x08
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	91 05       	cpc	r25, r1
 5de:	e9 f1       	breq	.+122    	; 0x65a <DIO_WritePin+0xe6>
 5e0:	c7 c0       	rjmp	.+398    	; 0x770 <DIO_WritePin+0x1fc>
		{
			case PA:

			SET_BIT(PORTA, pin_num);
 5e2:	ab e3       	ldi	r26, 0x3B	; 59
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	eb e3       	ldi	r30, 0x3B	; 59
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 2e       	mov	r0, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_WritePin+0x8c>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_WritePin+0x88>
 604:	84 2b       	or	r24, r20
 606:	8c 93       	st	X, r24
 608:	b3 c0       	rjmp	.+358    	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PB:
			
			SET_BIT(PORTB,pin_num);
 60a:	a8 e3       	ldi	r26, 0x38	; 56
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e8 e3       	ldi	r30, 0x38	; 56
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_WritePin+0xb4>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_WritePin+0xb0>
 62c:	84 2b       	or	r24, r20
 62e:	8c 93       	st	X, r24
 630:	9f c0       	rjmp	.+318    	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PC:
			
			SET_BIT(PORTC,pin_num);
 632:	a5 e3       	ldi	r26, 0x35	; 53
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e5 e3       	ldi	r30, 0x35	; 53
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 2e       	mov	r0, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_WritePin+0xdc>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	0a 94       	dec	r0
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_WritePin+0xd8>
 654:	84 2b       	or	r24, r20
 656:	8c 93       	st	X, r24
 658:	8b c0       	rjmp	.+278    	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PD:
			
			SET_BIT(PORTD,pin_num);
 65a:	a2 e3       	ldi	r26, 0x32	; 50
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e2 e3       	ldi	r30, 0x32	; 50
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 2e       	mov	r0, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_WritePin+0x104>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_WritePin+0x100>
 67c:	84 2b       	or	r24, r20
 67e:	8c 93       	st	X, r24
 680:	77 c0       	rjmp	.+238    	; 0x770 <DIO_WritePin+0x1fc>
			break;
		}
	}
	else if (volt==LOW)
 682:	8c 81       	ldd	r24, Y+4	; 0x04
 684:	88 23       	and	r24, r24
 686:	09 f0       	breq	.+2      	; 0x68a <DIO_WritePin+0x116>
 688:	73 c0       	rjmp	.+230    	; 0x770 <DIO_WritePin+0x1fc>
	{
		switch(port)
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	3e 83       	std	Y+6, r19	; 0x06
 692:	2d 83       	std	Y+5, r18	; 0x05
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	9e 81       	ldd	r25, Y+6	; 0x06
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	91 05       	cpc	r25, r1
 69c:	59 f1       	breq	.+86     	; 0x6f4 <DIO_WritePin+0x180>
 69e:	2d 81       	ldd	r18, Y+5	; 0x05
 6a0:	3e 81       	ldd	r19, Y+6	; 0x06
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	2c f4       	brge	.+10     	; 0x6b2 <DIO_WritePin+0x13e>
 6a8:	8d 81       	ldd	r24, Y+5	; 0x05
 6aa:	9e 81       	ldd	r25, Y+6	; 0x06
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	69 f0       	breq	.+26     	; 0x6ca <DIO_WritePin+0x156>
 6b0:	5f c0       	rjmp	.+190    	; 0x770 <DIO_WritePin+0x1fc>
 6b2:	2d 81       	ldd	r18, Y+5	; 0x05
 6b4:	3e 81       	ldd	r19, Y+6	; 0x06
 6b6:	22 30       	cpi	r18, 0x02	; 2
 6b8:	31 05       	cpc	r19, r1
 6ba:	89 f1       	breq	.+98     	; 0x71e <DIO_WritePin+0x1aa>
 6bc:	8d 81       	ldd	r24, Y+5	; 0x05
 6be:	9e 81       	ldd	r25, Y+6	; 0x06
 6c0:	83 30       	cpi	r24, 0x03	; 3
 6c2:	91 05       	cpc	r25, r1
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <DIO_WritePin+0x154>
 6c6:	40 c0       	rjmp	.+128    	; 0x748 <DIO_WritePin+0x1d4>
 6c8:	53 c0       	rjmp	.+166    	; 0x770 <DIO_WritePin+0x1fc>
		{
			case PA:

			CLR_BIT(PORTA, pin_num);
 6ca:	ab e3       	ldi	r26, 0x3B	; 59
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	eb e3       	ldi	r30, 0x3B	; 59
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	48 2f       	mov	r20, r24
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	28 2f       	mov	r18, r24
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 2e       	mov	r0, r18
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_WritePin+0x174>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_WritePin+0x170>
 6ec:	80 95       	com	r24
 6ee:	84 23       	and	r24, r20
 6f0:	8c 93       	st	X, r24
 6f2:	3e c0       	rjmp	.+124    	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PB:
			
			CLR_BIT(PORTB,pin_num);
 6f4:	a8 e3       	ldi	r26, 0x38	; 56
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e8 e3       	ldi	r30, 0x38	; 56
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	48 2f       	mov	r20, r24
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 2e       	mov	r0, r18
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_WritePin+0x19e>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_WritePin+0x19a>
 716:	80 95       	com	r24
 718:	84 23       	and	r24, r20
 71a:	8c 93       	st	X, r24
 71c:	29 c0       	rjmp	.+82     	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PC:
			
			CLR_BIT(PORTC,pin_num);
 71e:	a5 e3       	ldi	r26, 0x35	; 53
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e5 e3       	ldi	r30, 0x35	; 53
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 2e       	mov	r0, r18
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_WritePin+0x1c8>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	0a 94       	dec	r0
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_WritePin+0x1c4>
 740:	80 95       	com	r24
 742:	84 23       	and	r24, r20
 744:	8c 93       	st	X, r24
 746:	14 c0       	rjmp	.+40     	; 0x770 <DIO_WritePin+0x1fc>
			break;
			case PD:
			
			CLR_BIT(PORTD,pin_num);
 748:	a2 e3       	ldi	r26, 0x32	; 50
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	e2 e3       	ldi	r30, 0x32	; 50
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	48 2f       	mov	r20, r24
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 2e       	mov	r0, r18
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_WritePin+0x1f2>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_WritePin+0x1ee>
 76a:	80 95       	com	r24
 76c:	84 23       	and	r24, r20
 76e:	8c 93       	st	X, r24
			break;
		}
	}

}
 770:	28 96       	adiw	r28, 0x08	; 8
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <DIO_ReadPin>:


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	00 d0       	rcall	.+0      	; 0x788 <DIO_ReadPin+0x6>
 788:	00 d0       	rcall	.+0      	; 0x78a <DIO_ReadPin+0x8>
 78a:	00 d0       	rcall	.+0      	; 0x78c <DIO_ReadPin+0xa>
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Port_type port=pin/8;
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	86 95       	lsr	r24
 796:	86 95       	lsr	r24
 798:	86 95       	lsr	r24
 79a:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num=pin%8;
 79c:	8c 81       	ldd	r24, Y+4	; 0x04
 79e:	87 70       	andi	r24, 0x07	; 7
 7a0:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
 7a2:	19 82       	std	Y+1, r1	; 0x01
	
	switch(port)
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	3e 83       	std	Y+6, r19	; 0x06
 7ac:	2d 83       	std	Y+5, r18	; 0x05
 7ae:	4d 81       	ldd	r20, Y+5	; 0x05
 7b0:	5e 81       	ldd	r21, Y+6	; 0x06
 7b2:	41 30       	cpi	r20, 0x01	; 1
 7b4:	51 05       	cpc	r21, r1
 7b6:	41 f1       	breq	.+80     	; 0x808 <DIO_ReadPin+0x86>
 7b8:	8d 81       	ldd	r24, Y+5	; 0x05
 7ba:	9e 81       	ldd	r25, Y+6	; 0x06
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	91 05       	cpc	r25, r1
 7c0:	34 f4       	brge	.+12     	; 0x7ce <DIO_ReadPin+0x4c>
 7c2:	2d 81       	ldd	r18, Y+5	; 0x05
 7c4:	3e 81       	ldd	r19, Y+6	; 0x06
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	61 f0       	breq	.+24     	; 0x7e4 <DIO_ReadPin+0x62>
 7cc:	52 c0       	rjmp	.+164    	; 0x872 <__stack+0x13>
 7ce:	4d 81       	ldd	r20, Y+5	; 0x05
 7d0:	5e 81       	ldd	r21, Y+6	; 0x06
 7d2:	42 30       	cpi	r20, 0x02	; 2
 7d4:	51 05       	cpc	r21, r1
 7d6:	51 f1       	breq	.+84     	; 0x82c <DIO_ReadPin+0xaa>
 7d8:	8d 81       	ldd	r24, Y+5	; 0x05
 7da:	9e 81       	ldd	r25, Y+6	; 0x06
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	91 05       	cpc	r25, r1
 7e0:	b9 f1       	breq	.+110    	; 0x850 <DIO_ReadPin+0xce>
 7e2:	47 c0       	rjmp	.+142    	; 0x872 <__stack+0x13>
	{
		case PA:
		
		volt=READ_BIT(PINA,pin_num);
 7e4:	e9 e3       	ldi	r30, 0x39	; 57
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	88 2f       	mov	r24, r24
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	a9 01       	movw	r20, r18
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_ReadPin+0x7a>
 7f8:	55 95       	asr	r21
 7fa:	47 95       	ror	r20
 7fc:	8a 95       	dec	r24
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_ReadPin+0x76>
 800:	ca 01       	movw	r24, r20
 802:	81 70       	andi	r24, 0x01	; 1
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	35 c0       	rjmp	.+106    	; 0x872 <__stack+0x13>
		break;
		case PB:
		
		volt=READ_BIT(PINB,pin_num);
 808:	e6 e3       	ldi	r30, 0x36	; 54
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	28 2f       	mov	r18, r24
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	88 2f       	mov	r24, r24
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	a9 01       	movw	r20, r18
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_ReadPin+0x9e>
 81c:	55 95       	asr	r21
 81e:	47 95       	ror	r20
 820:	8a 95       	dec	r24
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_ReadPin+0x9a>
 824:	ca 01       	movw	r24, r20
 826:	81 70       	andi	r24, 0x01	; 1
 828:	89 83       	std	Y+1, r24	; 0x01
 82a:	23 c0       	rjmp	.+70     	; 0x872 <__stack+0x13>
		break;
		case PC:
		
		volt=READ_BIT(PINC,pin_num);
 82c:	e3 e3       	ldi	r30, 0x33	; 51
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	28 2f       	mov	r18, r24
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	a9 01       	movw	r20, r18
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_ReadPin+0xc2>
 840:	55 95       	asr	r21
 842:	47 95       	ror	r20
 844:	8a 95       	dec	r24
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_ReadPin+0xbe>
 848:	ca 01       	movw	r24, r20
 84a:	81 70       	andi	r24, 0x01	; 1
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__stack+0x13>
		break;
		case PD:
		
		volt=READ_BIT(PIND,pin_num);
 850:	e0 e3       	ldi	r30, 0x30	; 48
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	88 2f       	mov	r24, r24
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	a9 01       	movw	r20, r18
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	55 95       	asr	r21
 866:	47 95       	ror	r20
 868:	8a 95       	dec	r24
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	ca 01       	movw	r24, r20
 86e:	81 70       	andi	r24, 0x01	; 1
 870:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	return volt;
 872:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
 874:	26 96       	adiw	r28, 0x06	; 6
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	cf 91       	pop	r28
 882:	df 91       	pop	r29
 884:	08 95       	ret

00000886 <DIO_Init>:


void DIO_Init(void)
{
 886:	df 93       	push	r29
 888:	cf 93       	push	r28
 88a:	0f 92       	push	r0
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 890:	19 82       	std	Y+1, r1	; 0x01
 892:	0e c0       	rjmp	.+28     	; 0x8b0 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	88 2f       	mov	r24, r24
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	fc 01       	movw	r30, r24
 89c:	e0 5a       	subi	r30, 0xA0	; 160
 89e:	ff 4f       	sbci	r31, 0xFF	; 255
 8a0:	90 81       	ld	r25, Z
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	69 2f       	mov	r22, r25
 8a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	8f 5f       	subi	r24, 0xFF	; 255
 8ae:	89 83       	std	Y+1, r24	; 0x01
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
 8b2:	80 32       	cpi	r24, 0x20	; 32
 8b4:	78 f3       	brcs	.-34     	; 0x894 <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}

}
 8b6:	0f 90       	pop	r0
 8b8:	cf 91       	pop	r28
 8ba:	df 91       	pop	r29
 8bc:	08 95       	ret

000008be <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port, u8 value) {
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	00 d0       	rcall	.+0      	; 0x8c4 <DIO_WritePort+0x6>
 8c4:	00 d0       	rcall	.+0      	; 0x8c6 <DIO_WritePort+0x8>
 8c6:	cd b7       	in	r28, 0x3d	; 61
 8c8:	de b7       	in	r29, 0x3e	; 62
 8ca:	89 83       	std	Y+1, r24	; 0x01
 8cc:	6a 83       	std	Y+2, r22	; 0x02


	switch (port) {
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	28 2f       	mov	r18, r24
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	3c 83       	std	Y+4, r19	; 0x04
 8d6:	2b 83       	std	Y+3, r18	; 0x03
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	9c 81       	ldd	r25, Y+4	; 0x04
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	91 05       	cpc	r25, r1
 8e0:	d1 f0       	breq	.+52     	; 0x916 <DIO_WritePort+0x58>
 8e2:	2b 81       	ldd	r18, Y+3	; 0x03
 8e4:	3c 81       	ldd	r19, Y+4	; 0x04
 8e6:	22 30       	cpi	r18, 0x02	; 2
 8e8:	31 05       	cpc	r19, r1
 8ea:	2c f4       	brge	.+10     	; 0x8f6 <DIO_WritePort+0x38>
 8ec:	8b 81       	ldd	r24, Y+3	; 0x03
 8ee:	9c 81       	ldd	r25, Y+4	; 0x04
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	61 f0       	breq	.+24     	; 0x90c <DIO_WritePort+0x4e>
 8f4:	1e c0       	rjmp	.+60     	; 0x932 <DIO_WritePort+0x74>
 8f6:	2b 81       	ldd	r18, Y+3	; 0x03
 8f8:	3c 81       	ldd	r19, Y+4	; 0x04
 8fa:	22 30       	cpi	r18, 0x02	; 2
 8fc:	31 05       	cpc	r19, r1
 8fe:	81 f0       	breq	.+32     	; 0x920 <DIO_WritePort+0x62>
 900:	8b 81       	ldd	r24, Y+3	; 0x03
 902:	9c 81       	ldd	r25, Y+4	; 0x04
 904:	83 30       	cpi	r24, 0x03	; 3
 906:	91 05       	cpc	r25, r1
 908:	81 f0       	breq	.+32     	; 0x92a <DIO_WritePort+0x6c>
 90a:	13 c0       	rjmp	.+38     	; 0x932 <DIO_WritePort+0x74>
	case PA:
		PORTA = value;
 90c:	eb e3       	ldi	r30, 0x3B	; 59
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	8a 81       	ldd	r24, Y+2	; 0x02
 912:	80 83       	st	Z, r24
 914:	0e c0       	rjmp	.+28     	; 0x932 <DIO_WritePort+0x74>
		break;
	case PB:
		PORTB = value;
 916:	e8 e3       	ldi	r30, 0x38	; 56
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	8a 81       	ldd	r24, Y+2	; 0x02
 91c:	80 83       	st	Z, r24
 91e:	09 c0       	rjmp	.+18     	; 0x932 <DIO_WritePort+0x74>
		break;
	case PC:
		PORTC = value;
 920:	e5 e3       	ldi	r30, 0x35	; 53
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	8a 81       	ldd	r24, Y+2	; 0x02
 926:	80 83       	st	Z, r24
 928:	04 c0       	rjmp	.+8      	; 0x932 <DIO_WritePort+0x74>
		break;
	case PD:
		PORTD = value;
 92a:	e2 e3       	ldi	r30, 0x32	; 50
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	80 83       	st	Z, r24
		break;
	}
}
 932:	0f 90       	pop	r0
 934:	0f 90       	pop	r0
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	cf 91       	pop	r28
 93c:	df 91       	pop	r29
 93e:	08 95       	ret

00000940 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin) {
 940:	df 93       	push	r29
 942:	cf 93       	push	r28
 944:	00 d0       	rcall	.+0      	; 0x946 <DIO_TogglePin+0x6>
 946:	00 d0       	rcall	.+0      	; 0x948 <DIO_TogglePin+0x8>
 948:	0f 92       	push	r0
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin / 8;
 950:	8b 81       	ldd	r24, Y+3	; 0x03
 952:	86 95       	lsr	r24
 954:	86 95       	lsr	r24
 956:	86 95       	lsr	r24
 958:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num = pin % 8;
 95a:	8b 81       	ldd	r24, Y+3	; 0x03
 95c:	87 70       	andi	r24, 0x07	; 7
 95e:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
 960:	8a 81       	ldd	r24, Y+2	; 0x02
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	3d 83       	std	Y+5, r19	; 0x05
 968:	2c 83       	std	Y+4, r18	; 0x04
 96a:	8c 81       	ldd	r24, Y+4	; 0x04
 96c:	9d 81       	ldd	r25, Y+5	; 0x05
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	91 05       	cpc	r25, r1
 972:	49 f1       	breq	.+82     	; 0x9c6 <DIO_TogglePin+0x86>
 974:	2c 81       	ldd	r18, Y+4	; 0x04
 976:	3d 81       	ldd	r19, Y+5	; 0x05
 978:	22 30       	cpi	r18, 0x02	; 2
 97a:	31 05       	cpc	r19, r1
 97c:	2c f4       	brge	.+10     	; 0x988 <DIO_TogglePin+0x48>
 97e:	8c 81       	ldd	r24, Y+4	; 0x04
 980:	9d 81       	ldd	r25, Y+5	; 0x05
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	61 f0       	breq	.+24     	; 0x99e <DIO_TogglePin+0x5e>
 986:	5a c0       	rjmp	.+180    	; 0xa3c <DIO_TogglePin+0xfc>
 988:	2c 81       	ldd	r18, Y+4	; 0x04
 98a:	3d 81       	ldd	r19, Y+5	; 0x05
 98c:	22 30       	cpi	r18, 0x02	; 2
 98e:	31 05       	cpc	r19, r1
 990:	71 f1       	breq	.+92     	; 0x9ee <DIO_TogglePin+0xae>
 992:	8c 81       	ldd	r24, Y+4	; 0x04
 994:	9d 81       	ldd	r25, Y+5	; 0x05
 996:	83 30       	cpi	r24, 0x03	; 3
 998:	91 05       	cpc	r25, r1
 99a:	e9 f1       	breq	.+122    	; 0xa16 <DIO_TogglePin+0xd6>
 99c:	4f c0       	rjmp	.+158    	; 0xa3c <DIO_TogglePin+0xfc>
	case PA:

		TOG_BIT(PORTA, pin_num);
 99e:	ab e3       	ldi	r26, 0x3B	; 59
 9a0:	b0 e0       	ldi	r27, 0x00	; 0
 9a2:	eb e3       	ldi	r30, 0x3B	; 59
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	48 2f       	mov	r20, r24
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	28 2f       	mov	r18, r24
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	81 e0       	ldi	r24, 0x01	; 1
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 2e       	mov	r0, r18
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <DIO_TogglePin+0x7c>
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	0a 94       	dec	r0
 9be:	e2 f7       	brpl	.-8      	; 0x9b8 <DIO_TogglePin+0x78>
 9c0:	84 27       	eor	r24, r20
 9c2:	8c 93       	st	X, r24
 9c4:	3b c0       	rjmp	.+118    	; 0xa3c <DIO_TogglePin+0xfc>
		break;
	case PB:

		TOG_BIT(PORTB, pin_num);
 9c6:	a8 e3       	ldi	r26, 0x38	; 56
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e8 e3       	ldi	r30, 0x38	; 56
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	48 2f       	mov	r20, r24
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	28 2f       	mov	r18, r24
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	02 2e       	mov	r0, r18
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_TogglePin+0xa4>
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	0a 94       	dec	r0
 9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_TogglePin+0xa0>
 9e8:	84 27       	eor	r24, r20
 9ea:	8c 93       	st	X, r24
 9ec:	27 c0       	rjmp	.+78     	; 0xa3c <DIO_TogglePin+0xfc>
		break;
	case PC:

		TOG_BIT(PORTC, pin_num);
 9ee:	a5 e3       	ldi	r26, 0x35	; 53
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	e5 e3       	ldi	r30, 0x35	; 53
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	48 2f       	mov	r20, r24
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	28 2f       	mov	r18, r24
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	02 2e       	mov	r0, r18
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <DIO_TogglePin+0xcc>
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	0a 94       	dec	r0
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <DIO_TogglePin+0xc8>
 a10:	84 27       	eor	r24, r20
 a12:	8c 93       	st	X, r24
 a14:	13 c0       	rjmp	.+38     	; 0xa3c <DIO_TogglePin+0xfc>
		break;
	case PD:

		TOG_BIT(PORTD, pin_num);
 a16:	a2 e3       	ldi	r26, 0x32	; 50
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	e2 e3       	ldi	r30, 0x32	; 50
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	80 81       	ld	r24, Z
 a20:	48 2f       	mov	r20, r24
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	28 2f       	mov	r18, r24
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 2e       	mov	r0, r18
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_TogglePin+0xf4>
 a30:	88 0f       	add	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	0a 94       	dec	r0
 a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_TogglePin+0xf0>
 a38:	84 27       	eor	r24, r20
 a3a:	8c 93       	st	X, r24
		break;
	}
}
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	0f 90       	pop	r0
 a44:	0f 90       	pop	r0
 a46:	cf 91       	pop	r28
 a48:	df 91       	pop	r29
 a4a:	08 95       	ret

00000a4c <UART_Init>:


void (*ptr_isr)(void)=0;

void UART_Init()
{
 a4c:	df 93       	push	r29
 a4e:	cf 93       	push	r28
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62

	// selection and 8bit data
	UCSRC = (1<<UCSRC_UCSZ0)|(1<<UCSRC_UCSZ1)|(1<<UCSRC_URSEL);
 a54:	e0 e4       	ldi	r30, 0x40	; 64
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	86 e8       	ldi	r24, 0x86	; 134
 a5a:	80 83       	st	Z, r24

	UBRRL = UART_BOUDRATE_57600;
 a5c:	e9 e2       	ldi	r30, 0x29	; 41
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 e1       	ldi	r24, 0x10	; 16
 a62:	80 83       	st	Z, r24


	// Enable TX and RX
	SET_BIT(UCSRB, UCSRB_TXEN);
 a64:	aa e2       	ldi	r26, 0x2A	; 42
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	ea e2       	ldi	r30, 0x2A	; 42
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	88 60       	ori	r24, 0x08	; 8
 a70:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_RXEN);
 a72:	aa e2       	ldi	r26, 0x2A	; 42
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	ea e2       	ldi	r30, 0x2A	; 42
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	80 81       	ld	r24, Z
 a7c:	80 61       	ori	r24, 0x10	; 16
 a7e:	8c 93       	st	X, r24
}
 a80:	cf 91       	pop	r28
 a82:	df 91       	pop	r29
 a84:	08 95       	ret

00000a86 <UART_sendByte>:

void UART_sendByte(u8 ch)
{
 a86:	df 93       	push	r29
 a88:	cf 93       	push	r28
 a8a:	0f 92       	push	r0
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
 a90:	89 83       	std	Y+1, r24	; 0x01

	while(READ_BIT(UCSRA, UCSRA_UDRE)==0);
 a92:	eb e2       	ldi	r30, 0x2B	; 43
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	82 95       	swap	r24
 a9a:	86 95       	lsr	r24
 a9c:	87 70       	andi	r24, 0x07	; 7
 a9e:	88 2f       	mov	r24, r24
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	81 70       	andi	r24, 0x01	; 1
 aa4:	90 70       	andi	r25, 0x00	; 0
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	a1 f3       	breq	.-24     	; 0xa92 <UART_sendByte+0xc>
	UDR = ch;
 aaa:	ec e2       	ldi	r30, 0x2C	; 44
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	80 83       	st	Z, r24
}
 ab2:	0f 90       	pop	r0
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <UART_sendString>:

void UART_sendString(u8* str)
{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	00 d0       	rcall	.+0      	; 0xac0 <UART_sendString+0x6>
 ac0:	0f 92       	push	r0
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
 ac6:	9b 83       	std	Y+3, r25	; 0x03
 ac8:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
 aca:	19 82       	std	Y+1, r1	; 0x01

	UART_sendByte(str[i]);
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	28 2f       	mov	r18, r24
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	8a 81       	ldd	r24, Y+2	; 0x02
 ad4:	9b 81       	ldd	r25, Y+3	; 0x03
 ad6:	fc 01       	movw	r30, r24
 ad8:	e2 0f       	add	r30, r18
 ada:	f3 1f       	adc	r31, r19
 adc:	80 81       	ld	r24, Z
 ade:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>
 ae2:	0e c0       	rjmp	.+28     	; 0xb00 <UART_sendString+0x46>

	for(;str[i];)
	{
		i++;
 ae4:	89 81       	ldd	r24, Y+1	; 0x01
 ae6:	8f 5f       	subi	r24, 0xFF	; 255
 ae8:	89 83       	std	Y+1, r24	; 0x01

		UART_sendByte(str[i]);
 aea:	89 81       	ldd	r24, Y+1	; 0x01
 aec:	28 2f       	mov	r18, r24
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	9b 81       	ldd	r25, Y+3	; 0x03
 af4:	fc 01       	movw	r30, r24
 af6:	e2 0f       	add	r30, r18
 af8:	f3 1f       	adc	r31, r19
 afa:	80 81       	ld	r24, Z
 afc:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>

	u8 i=0;

	UART_sendByte(str[i]);

	for(;str[i];)
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	28 2f       	mov	r18, r24
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	8a 81       	ldd	r24, Y+2	; 0x02
 b08:	9b 81       	ldd	r25, Y+3	; 0x03
 b0a:	fc 01       	movw	r30, r24
 b0c:	e2 0f       	add	r30, r18
 b0e:	f3 1f       	adc	r31, r19
 b10:	80 81       	ld	r24, Z
 b12:	88 23       	and	r24, r24
 b14:	39 f7       	brne	.-50     	; 0xae4 <UART_sendString+0x2a>
	{
		i++;

		UART_sendByte(str[i]);
	}
	str[i] = '\0';
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	28 2f       	mov	r18, r24
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	8a 81       	ldd	r24, Y+2	; 0x02
 b1e:	9b 81       	ldd	r25, Y+3	; 0x03
 b20:	fc 01       	movw	r30, r24
 b22:	e2 0f       	add	r30, r18
 b24:	f3 1f       	adc	r31, r19
 b26:	10 82       	st	Z, r1

}
 b28:	0f 90       	pop	r0
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	cf 91       	pop	r28
 b30:	df 91       	pop	r29
 b32:	08 95       	ret

00000b34 <UART_receiveByteSynch>:

u8 UART_receiveByteSynch()
{
 b34:	df 93       	push	r29
 b36:	cf 93       	push	r28
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62

	while(READ_BIT(UCSRA, UCSRA_RXC)==0);
 b3c:	eb e2       	ldi	r30, 0x2B	; 43
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	80 81       	ld	r24, Z
 b42:	88 23       	and	r24, r24
 b44:	dc f7       	brge	.-10     	; 0xb3c <UART_receiveByteSynch+0x8>
	return UDR;
 b46:	ec e2       	ldi	r30, 0x2C	; 44
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	80 81       	ld	r24, Z


}
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <UART_RX_InterruptEnable>:

void UART_RX_InterruptEnable(void)
{
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB,UCSRB_RXCIE);
 b5a:	aa e2       	ldi	r26, 0x2A	; 42
 b5c:	b0 e0       	ldi	r27, 0x00	; 0
 b5e:	ea e2       	ldi	r30, 0x2A	; 42
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	80 68       	ori	r24, 0x80	; 128
 b66:	8c 93       	st	X, r24
}
 b68:	cf 91       	pop	r28
 b6a:	df 91       	pop	r29
 b6c:	08 95       	ret

00000b6e <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
 b6e:	df 93       	push	r29
 b70:	cf 93       	push	r28
 b72:	cd b7       	in	r28, 0x3d	; 61
 b74:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB,UCSRB_RXCIE);
 b76:	aa e2       	ldi	r26, 0x2A	; 42
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	ea e2       	ldi	r30, 0x2A	; 42
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	8f 77       	andi	r24, 0x7F	; 127
 b82:	8c 93       	st	X, r24
}
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	08 95       	ret

00000b8a <UART_receiveByteAsynchCallBack>:


void UART_receiveByteAsynchCallBack(void (*ptr)(void))
{
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	00 d0       	rcall	.+0      	; 0xb90 <UART_receiveByteAsynchCallBack+0x6>
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
 b94:	9a 83       	std	Y+2, r25	; 0x02
 b96:	89 83       	std	Y+1, r24	; 0x01

	if (ptr != NULL)
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	9a 81       	ldd	r25, Y+2	; 0x02
 b9c:	82 30       	cpi	r24, 0x02	; 2
 b9e:	91 05       	cpc	r25, r1
 ba0:	31 f0       	breq	.+12     	; 0xbae <UART_receiveByteAsynchCallBack+0x24>
	{
		ptr_isr = ptr;
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	9a 81       	ldd	r25, Y+2	; 0x02
 ba6:	90 93 8b 00 	sts	0x008B, r25
 baa:	80 93 8a 00 	sts	0x008A, r24
	}


}
 bae:	0f 90       	pop	r0
 bb0:	0f 90       	pop	r0
 bb2:	cf 91       	pop	r28
 bb4:	df 91       	pop	r29
 bb6:	08 95       	ret

00000bb8 <UART_ReciveNoBlock>:
u8 UART_ReciveNoBlock(void)
{
 bb8:	df 93       	push	r29
 bba:	cf 93       	push	r28
 bbc:	cd b7       	in	r28, 0x3d	; 61
 bbe:	de b7       	in	r29, 0x3e	; 62
    return UDR;
 bc0:	ec e2       	ldi	r30, 0x2C	; 44
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	80 81       	ld	r24, Z
}
 bc6:	cf 91       	pop	r28
 bc8:	df 91       	pop	r29
 bca:	08 95       	ret

00000bcc <__vector_13>:

ISR(UART_RX_vect)
{
 bcc:	1f 92       	push	r1
 bce:	0f 92       	push	r0
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	0f 92       	push	r0
 bd4:	11 24       	eor	r1, r1
 bd6:	2f 93       	push	r18
 bd8:	3f 93       	push	r19
 bda:	4f 93       	push	r20
 bdc:	5f 93       	push	r21
 bde:	6f 93       	push	r22
 be0:	7f 93       	push	r23
 be2:	8f 93       	push	r24
 be4:	9f 93       	push	r25
 be6:	af 93       	push	r26
 be8:	bf 93       	push	r27
 bea:	ef 93       	push	r30
 bec:	ff 93       	push	r31
 bee:	df 93       	push	r29
 bf0:	cf 93       	push	r28
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62

	if (ptr_isr != NULL)
 bf6:	80 91 8a 00 	lds	r24, 0x008A
 bfa:	90 91 8b 00 	lds	r25, 0x008B
 bfe:	82 30       	cpi	r24, 0x02	; 2
 c00:	91 05       	cpc	r25, r1
 c02:	29 f0       	breq	.+10     	; 0xc0e <__vector_13+0x42>
	{
		ptr_isr();
 c04:	e0 91 8a 00 	lds	r30, 0x008A
 c08:	f0 91 8b 00 	lds	r31, 0x008B
 c0c:	09 95       	icall
	}

}
 c0e:	cf 91       	pop	r28
 c10:	df 91       	pop	r29
 c12:	ff 91       	pop	r31
 c14:	ef 91       	pop	r30
 c16:	bf 91       	pop	r27
 c18:	af 91       	pop	r26
 c1a:	9f 91       	pop	r25
 c1c:	8f 91       	pop	r24
 c1e:	7f 91       	pop	r23
 c20:	6f 91       	pop	r22
 c22:	5f 91       	pop	r21
 c24:	4f 91       	pop	r20
 c26:	3f 91       	pop	r19
 c28:	2f 91       	pop	r18
 c2a:	0f 90       	pop	r0
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	0f 90       	pop	r0
 c30:	1f 90       	pop	r1
 c32:	18 95       	reti

00000c34 <main>:
#include "StdTypes.h"
#include "Utils.h"
#include "DIO_interface.h"
#include "UART_Interface.h"

void main() {
 c34:	0f 93       	push	r16
 c36:	1f 93       	push	r17
 c38:	df 93       	push	r29
 c3a:	cf 93       	push	r28
 c3c:	cd b7       	in	r28, 0x3d	; 61
 c3e:	de b7       	in	r29, 0x3e	; 62
 c40:	aa 97       	sbiw	r28, 0x2a	; 42
 c42:	0f b6       	in	r0, 0x3f	; 63
 c44:	f8 94       	cli
 c46:	de bf       	out	0x3e, r29	; 62
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 c4c:	0e 94 43 04 	call	0x886	; 0x886 <DIO_Init>
	UART_Init();
 c50:	0e 94 26 05 	call	0xa4c	; 0xa4c <UART_Init>
	u8 arr_serv1[] = { 127, 49, 51 };
 c54:	ce 01       	movw	r24, r28
 c56:	0e 96       	adiw	r24, 0x0e	; 14
 c58:	9a a3       	std	Y+34, r25	; 0x22
 c5a:	89 a3       	std	Y+33, r24	; 0x21
 c5c:	e6 e8       	ldi	r30, 0x86	; 134
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	fc a3       	std	Y+36, r31	; 0x24
 c62:	eb a3       	std	Y+35, r30	; 0x23
 c64:	f3 e0       	ldi	r31, 0x03	; 3
 c66:	fd a3       	std	Y+37, r31	; 0x25
 c68:	eb a1       	ldd	r30, Y+35	; 0x23
 c6a:	fc a1       	ldd	r31, Y+36	; 0x24
 c6c:	00 80       	ld	r0, Z
 c6e:	8b a1       	ldd	r24, Y+35	; 0x23
 c70:	9c a1       	ldd	r25, Y+36	; 0x24
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	9c a3       	std	Y+36, r25	; 0x24
 c76:	8b a3       	std	Y+35, r24	; 0x23
 c78:	e9 a1       	ldd	r30, Y+33	; 0x21
 c7a:	fa a1       	ldd	r31, Y+34	; 0x22
 c7c:	00 82       	st	Z, r0
 c7e:	89 a1       	ldd	r24, Y+33	; 0x21
 c80:	9a a1       	ldd	r25, Y+34	; 0x22
 c82:	01 96       	adiw	r24, 0x01	; 1
 c84:	9a a3       	std	Y+34, r25	; 0x22
 c86:	89 a3       	std	Y+33, r24	; 0x21
 c88:	9d a1       	ldd	r25, Y+37	; 0x25
 c8a:	91 50       	subi	r25, 0x01	; 1
 c8c:	9d a3       	std	Y+37, r25	; 0x25
 c8e:	ed a1       	ldd	r30, Y+37	; 0x25
 c90:	ee 23       	and	r30, r30
 c92:	51 f7       	brne	.-44     	; 0xc68 <main+0x34>
	u8 arr_serv2[] = { 103, 1, 0, 0, 0, 0 };
 c94:	ce 01       	movw	r24, r28
 c96:	41 96       	adiw	r24, 0x11	; 17
 c98:	9f a3       	std	Y+39, r25	; 0x27
 c9a:	8e a3       	std	Y+38, r24	; 0x26
 c9c:	e0 e8       	ldi	r30, 0x80	; 128
 c9e:	f0 e0       	ldi	r31, 0x00	; 0
 ca0:	f9 a7       	std	Y+41, r31	; 0x29
 ca2:	e8 a7       	std	Y+40, r30	; 0x28
 ca4:	f6 e0       	ldi	r31, 0x06	; 6
 ca6:	fa a7       	std	Y+42, r31	; 0x2a
 ca8:	e8 a5       	ldd	r30, Y+40	; 0x28
 caa:	f9 a5       	ldd	r31, Y+41	; 0x29
 cac:	00 80       	ld	r0, Z
 cae:	88 a5       	ldd	r24, Y+40	; 0x28
 cb0:	99 a5       	ldd	r25, Y+41	; 0x29
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	99 a7       	std	Y+41, r25	; 0x29
 cb6:	88 a7       	std	Y+40, r24	; 0x28
 cb8:	ee a1       	ldd	r30, Y+38	; 0x26
 cba:	ff a1       	ldd	r31, Y+39	; 0x27
 cbc:	00 82       	st	Z, r0
 cbe:	8e a1       	ldd	r24, Y+38	; 0x26
 cc0:	9f a1       	ldd	r25, Y+39	; 0x27
 cc2:	01 96       	adiw	r24, 0x01	; 1
 cc4:	9f a3       	std	Y+39, r25	; 0x27
 cc6:	8e a3       	std	Y+38, r24	; 0x26
 cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
 cca:	91 50       	subi	r25, 0x01	; 1
 ccc:	9a a7       	std	Y+42, r25	; 0x2a
 cce:	ea a5       	ldd	r30, Y+42	; 0x2a
 cd0:	ee 23       	and	r30, r30
 cd2:	51 f7       	brne	.-44     	; 0xca8 <main+0x74>
	u8 arr_serv3[] = { 103, 2 };
 cd4:	87 e6       	ldi	r24, 0x67	; 103
 cd6:	8f 8b       	std	Y+23, r24	; 0x17
 cd8:	82 e0       	ldi	r24, 0x02	; 2
 cda:	88 8f       	std	Y+24, r24	; 0x18
	u8 arr_serv4[] = { 103, 1, 170, 0 };
 cdc:	87 e6       	ldi	r24, 0x67	; 103
 cde:	89 8f       	std	Y+25, r24	; 0x19
 ce0:	81 e0       	ldi	r24, 0x01	; 1
 ce2:	8a 8f       	std	Y+26, r24	; 0x1a
 ce4:	8a ea       	ldi	r24, 0xAA	; 170
 ce6:	8b 8f       	std	Y+27, r24	; 0x1b
 ce8:	1c 8e       	std	Y+28, r1	; 0x1c
	u8 arr_rec1[] = { 0 };
 cea:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 arr_rec2[] = { 0 };
 cec:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 arr_rec3[] = { 0 };
 cee:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 arr_rec4[] = { 0 };
 cf0:	18 a2       	std	Y+32, r1	; 0x20

	u32 collector = 0;
 cf2:	1a 86       	std	Y+10, r1	; 0x0a
 cf4:	1b 86       	std	Y+11, r1	; 0x0b
 cf6:	1c 86       	std	Y+12, r1	; 0x0c
 cf8:	1d 86       	std	Y+13, r1	; 0x0d

	/**********************************************************************/
	for (u8 i = 0; i < 4; i++) {
 cfa:	19 86       	std	Y+9, r1	; 0x09
 cfc:	0f c0       	rjmp	.+30     	; 0xd1c <main+0xe8>
		arr_rec1[i] = UART_receiveByteSynch();
 cfe:	89 85       	ldd	r24, Y+9	; 0x09
 d00:	08 2f       	mov	r16, r24
 d02:	10 e0       	ldi	r17, 0x00	; 0
 d04:	0e 94 9a 05 	call	0xb34	; 0xb34 <UART_receiveByteSynch>
 d08:	28 2f       	mov	r18, r24
 d0a:	ce 01       	movw	r24, r28
 d0c:	4d 96       	adiw	r24, 0x1d	; 29
 d0e:	fc 01       	movw	r30, r24
 d10:	e0 0f       	add	r30, r16
 d12:	f1 1f       	adc	r31, r17
 d14:	20 83       	st	Z, r18
	u8 arr_rec4[] = { 0 };

	u32 collector = 0;

	/**********************************************************************/
	for (u8 i = 0; i < 4; i++) {
 d16:	89 85       	ldd	r24, Y+9	; 0x09
 d18:	8f 5f       	subi	r24, 0xFF	; 255
 d1a:	89 87       	std	Y+9, r24	; 0x09
 d1c:	89 85       	ldd	r24, Y+9	; 0x09
 d1e:	84 30       	cpi	r24, 0x04	; 4
 d20:	70 f3       	brcs	.-36     	; 0xcfe <main+0xca>
		arr_rec1[i] = UART_receiveByteSynch();
	}

	for (u8 i = 0; i < 4; i++) {
 d22:	18 86       	std	Y+8, r1	; 0x08
 d24:	1c c0       	rjmp	.+56     	; 0xd5e <main+0x12a>
		collector += arr_rec1[i];
 d26:	88 85       	ldd	r24, Y+8	; 0x08
 d28:	28 2f       	mov	r18, r24
 d2a:	30 e0       	ldi	r19, 0x00	; 0
 d2c:	ce 01       	movw	r24, r28
 d2e:	4d 96       	adiw	r24, 0x1d	; 29
 d30:	fc 01       	movw	r30, r24
 d32:	e2 0f       	add	r30, r18
 d34:	f3 1f       	adc	r31, r19
 d36:	80 81       	ld	r24, Z
 d38:	28 2f       	mov	r18, r24
 d3a:	30 e0       	ldi	r19, 0x00	; 0
 d3c:	40 e0       	ldi	r20, 0x00	; 0
 d3e:	50 e0       	ldi	r21, 0x00	; 0
 d40:	8a 85       	ldd	r24, Y+10	; 0x0a
 d42:	9b 85       	ldd	r25, Y+11	; 0x0b
 d44:	ac 85       	ldd	r26, Y+12	; 0x0c
 d46:	bd 85       	ldd	r27, Y+13	; 0x0d
 d48:	82 0f       	add	r24, r18
 d4a:	93 1f       	adc	r25, r19
 d4c:	a4 1f       	adc	r26, r20
 d4e:	b5 1f       	adc	r27, r21
 d50:	8a 87       	std	Y+10, r24	; 0x0a
 d52:	9b 87       	std	Y+11, r25	; 0x0b
 d54:	ac 87       	std	Y+12, r26	; 0x0c
 d56:	bd 87       	std	Y+13, r27	; 0x0d
	/**********************************************************************/
	for (u8 i = 0; i < 4; i++) {
		arr_rec1[i] = UART_receiveByteSynch();
	}

	for (u8 i = 0; i < 4; i++) {
 d58:	88 85       	ldd	r24, Y+8	; 0x08
 d5a:	8f 5f       	subi	r24, 0xFF	; 255
 d5c:	88 87       	std	Y+8, r24	; 0x08
 d5e:	88 85       	ldd	r24, Y+8	; 0x08
 d60:	84 30       	cpi	r24, 0x04	; 4
 d62:	08 f3       	brcs	.-62     	; 0xd26 <main+0xf2>
		collector += arr_rec1[i];
	}

	if (collector == 220) {
 d64:	8a 85       	ldd	r24, Y+10	; 0x0a
 d66:	9b 85       	ldd	r25, Y+11	; 0x0b
 d68:	ac 85       	ldd	r26, Y+12	; 0x0c
 d6a:	bd 85       	ldd	r27, Y+13	; 0x0d
 d6c:	8c 3d       	cpi	r24, 0xDC	; 220
 d6e:	91 05       	cpc	r25, r1
 d70:	a1 05       	cpc	r26, r1
 d72:	b1 05       	cpc	r27, r1
 d74:	09 f0       	breq	.+2      	; 0xd78 <main+0x144>
 d76:	c6 c0       	rjmp	.+396    	; 0xf04 <main+0x2d0>

		for (u8 i = 0; i < 3; i++) {
 d78:	1f 82       	std	Y+7, r1	; 0x07
 d7a:	0e c0       	rjmp	.+28     	; 0xd98 <main+0x164>
			UART_sendByte(arr_serv1[i]);
 d7c:	8f 81       	ldd	r24, Y+7	; 0x07
 d7e:	28 2f       	mov	r18, r24
 d80:	30 e0       	ldi	r19, 0x00	; 0
 d82:	ce 01       	movw	r24, r28
 d84:	0e 96       	adiw	r24, 0x0e	; 14
 d86:	fc 01       	movw	r30, r24
 d88:	e2 0f       	add	r30, r18
 d8a:	f3 1f       	adc	r31, r19
 d8c:	80 81       	ld	r24, Z
 d8e:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>
		collector += arr_rec1[i];
	}

	if (collector == 220) {

		for (u8 i = 0; i < 3; i++) {
 d92:	8f 81       	ldd	r24, Y+7	; 0x07
 d94:	8f 5f       	subi	r24, 0xFF	; 255
 d96:	8f 83       	std	Y+7, r24	; 0x07
 d98:	8f 81       	ldd	r24, Y+7	; 0x07
 d9a:	83 30       	cpi	r24, 0x03	; 3
 d9c:	78 f3       	brcs	.-34     	; 0xd7c <main+0x148>
			UART_sendByte(arr_serv1[i]);
		}

		/***********************************************************************/
		arr_rec2[0] = UART_receiveByteSynch();
 d9e:	0e 94 9a 05 	call	0xb34	; 0xb34 <UART_receiveByteSynch>
 da2:	8e 8f       	std	Y+30, r24	; 0x1e
		arr_rec2[1] = UART_receiveByteSynch();
 da4:	0e 94 9a 05 	call	0xb34	; 0xb34 <UART_receiveByteSynch>
 da8:	8f 8f       	std	Y+31, r24	; 0x1f
		collector = 0;
 daa:	1a 86       	std	Y+10, r1	; 0x0a
 dac:	1b 86       	std	Y+11, r1	; 0x0b
 dae:	1c 86       	std	Y+12, r1	; 0x0c
 db0:	1d 86       	std	Y+13, r1	; 0x0d

		for (u8 i = 0; i < 2; i++) {
 db2:	1e 82       	std	Y+6, r1	; 0x06
 db4:	1c c0       	rjmp	.+56     	; 0xdee <main+0x1ba>
			collector += arr_rec2[i];
 db6:	8e 81       	ldd	r24, Y+6	; 0x06
 db8:	28 2f       	mov	r18, r24
 dba:	30 e0       	ldi	r19, 0x00	; 0
 dbc:	ce 01       	movw	r24, r28
 dbe:	4e 96       	adiw	r24, 0x1e	; 30
 dc0:	fc 01       	movw	r30, r24
 dc2:	e2 0f       	add	r30, r18
 dc4:	f3 1f       	adc	r31, r19
 dc6:	80 81       	ld	r24, Z
 dc8:	28 2f       	mov	r18, r24
 dca:	30 e0       	ldi	r19, 0x00	; 0
 dcc:	40 e0       	ldi	r20, 0x00	; 0
 dce:	50 e0       	ldi	r21, 0x00	; 0
 dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
 dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
 dd4:	ac 85       	ldd	r26, Y+12	; 0x0c
 dd6:	bd 85       	ldd	r27, Y+13	; 0x0d
 dd8:	82 0f       	add	r24, r18
 dda:	93 1f       	adc	r25, r19
 ddc:	a4 1f       	adc	r26, r20
 dde:	b5 1f       	adc	r27, r21
 de0:	8a 87       	std	Y+10, r24	; 0x0a
 de2:	9b 87       	std	Y+11, r25	; 0x0b
 de4:	ac 87       	std	Y+12, r26	; 0x0c
 de6:	bd 87       	std	Y+13, r27	; 0x0d
		/***********************************************************************/
		arr_rec2[0] = UART_receiveByteSynch();
		arr_rec2[1] = UART_receiveByteSynch();
		collector = 0;

		for (u8 i = 0; i < 2; i++) {
 de8:	8e 81       	ldd	r24, Y+6	; 0x06
 dea:	8f 5f       	subi	r24, 0xFF	; 255
 dec:	8e 83       	std	Y+6, r24	; 0x06
 dee:	8e 81       	ldd	r24, Y+6	; 0x06
 df0:	82 30       	cpi	r24, 0x02	; 2
 df2:	08 f3       	brcs	.-62     	; 0xdb6 <main+0x182>
			collector += arr_rec2[i];
		}
		if (collector == 40) {
 df4:	8a 85       	ldd	r24, Y+10	; 0x0a
 df6:	9b 85       	ldd	r25, Y+11	; 0x0b
 df8:	ac 85       	ldd	r26, Y+12	; 0x0c
 dfa:	bd 85       	ldd	r27, Y+13	; 0x0d
 dfc:	88 32       	cpi	r24, 0x28	; 40
 dfe:	91 05       	cpc	r25, r1
 e00:	a1 05       	cpc	r26, r1
 e02:	b1 05       	cpc	r27, r1
 e04:	99 f4       	brne	.+38     	; 0xe2c <main+0x1f8>

			for (u8 i = 0; i < 6; i++) {
 e06:	1d 82       	std	Y+5, r1	; 0x05
 e08:	0e c0       	rjmp	.+28     	; 0xe26 <main+0x1f2>

				UART_sendByte(arr_serv2[i]);
 e0a:	8d 81       	ldd	r24, Y+5	; 0x05
 e0c:	28 2f       	mov	r18, r24
 e0e:	30 e0       	ldi	r19, 0x00	; 0
 e10:	ce 01       	movw	r24, r28
 e12:	41 96       	adiw	r24, 0x11	; 17
 e14:	fc 01       	movw	r30, r24
 e16:	e2 0f       	add	r30, r18
 e18:	f3 1f       	adc	r31, r19
 e1a:	80 81       	ld	r24, Z
 e1c:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>
		for (u8 i = 0; i < 2; i++) {
			collector += arr_rec2[i];
		}
		if (collector == 40) {

			for (u8 i = 0; i < 6; i++) {
 e20:	8d 81       	ldd	r24, Y+5	; 0x05
 e22:	8f 5f       	subi	r24, 0xFF	; 255
 e24:	8d 83       	std	Y+5, r24	; 0x05
 e26:	8d 81       	ldd	r24, Y+5	; 0x05
 e28:	86 30       	cpi	r24, 0x06	; 6
 e2a:	78 f3       	brcs	.-34     	; 0xe0a <main+0x1d6>
			}
		}

		/***********************************************************************/

		for (u8 i = 0; i < 6; i++) {
 e2c:	1c 82       	std	Y+4, r1	; 0x04
 e2e:	0f c0       	rjmp	.+30     	; 0xe4e <main+0x21a>
			arr_rec3[i] = UART_receiveByteSynch();
 e30:	8c 81       	ldd	r24, Y+4	; 0x04
 e32:	08 2f       	mov	r16, r24
 e34:	10 e0       	ldi	r17, 0x00	; 0
 e36:	0e 94 9a 05 	call	0xb34	; 0xb34 <UART_receiveByteSynch>
 e3a:	28 2f       	mov	r18, r24
 e3c:	ce 01       	movw	r24, r28
 e3e:	4f 96       	adiw	r24, 0x1f	; 31
 e40:	fc 01       	movw	r30, r24
 e42:	e0 0f       	add	r30, r16
 e44:	f1 1f       	adc	r31, r17
 e46:	20 83       	st	Z, r18
			}
		}

		/***********************************************************************/

		for (u8 i = 0; i < 6; i++) {
 e48:	8c 81       	ldd	r24, Y+4	; 0x04
 e4a:	8f 5f       	subi	r24, 0xFF	; 255
 e4c:	8c 83       	std	Y+4, r24	; 0x04
 e4e:	8c 81       	ldd	r24, Y+4	; 0x04
 e50:	86 30       	cpi	r24, 0x06	; 6
 e52:	70 f3       	brcs	.-36     	; 0xe30 <main+0x1fc>
			arr_rec3[i] = UART_receiveByteSynch();
		}
		collector = 0;
 e54:	1a 86       	std	Y+10, r1	; 0x0a
 e56:	1b 86       	std	Y+11, r1	; 0x0b
 e58:	1c 86       	std	Y+12, r1	; 0x0c
 e5a:	1d 86       	std	Y+13, r1	; 0x0d

		if (collector == 104) {
 e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
 e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
 e60:	ac 85       	ldd	r26, Y+12	; 0x0c
 e62:	bd 85       	ldd	r27, Y+13	; 0x0d
 e64:	88 36       	cpi	r24, 0x68	; 104
 e66:	91 05       	cpc	r25, r1
 e68:	a1 05       	cpc	r26, r1
 e6a:	b1 05       	cpc	r27, r1
 e6c:	99 f4       	brne	.+38     	; 0xe94 <main+0x260>

			for (u8 i = 0; i < 2; i++) {
 e6e:	1b 82       	std	Y+3, r1	; 0x03
 e70:	0e c0       	rjmp	.+28     	; 0xe8e <main+0x25a>

				UART_sendByte(arr_serv3[i]);
 e72:	8b 81       	ldd	r24, Y+3	; 0x03
 e74:	28 2f       	mov	r18, r24
 e76:	30 e0       	ldi	r19, 0x00	; 0
 e78:	ce 01       	movw	r24, r28
 e7a:	47 96       	adiw	r24, 0x17	; 23
 e7c:	fc 01       	movw	r30, r24
 e7e:	e2 0f       	add	r30, r18
 e80:	f3 1f       	adc	r31, r19
 e82:	80 81       	ld	r24, Z
 e84:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>
		}
		collector = 0;

		if (collector == 104) {

			for (u8 i = 0; i < 2; i++) {
 e88:	8b 81       	ldd	r24, Y+3	; 0x03
 e8a:	8f 5f       	subi	r24, 0xFF	; 255
 e8c:	8b 83       	std	Y+3, r24	; 0x03
 e8e:	8b 81       	ldd	r24, Y+3	; 0x03
 e90:	82 30       	cpi	r24, 0x02	; 2
 e92:	78 f3       	brcs	.-34     	; 0xe72 <main+0x23e>
			}

		}
		/***************************************************************************/

		for (u8 i = 0; i < 4; i++) {
 e94:	1a 82       	std	Y+2, r1	; 0x02
 e96:	0f c0       	rjmp	.+30     	; 0xeb6 <main+0x282>

			arr_rec4[i] = UART_receiveByteSynch();
 e98:	8a 81       	ldd	r24, Y+2	; 0x02
 e9a:	08 2f       	mov	r16, r24
 e9c:	10 e0       	ldi	r17, 0x00	; 0
 e9e:	0e 94 9a 05 	call	0xb34	; 0xb34 <UART_receiveByteSynch>
 ea2:	28 2f       	mov	r18, r24
 ea4:	ce 01       	movw	r24, r28
 ea6:	80 96       	adiw	r24, 0x20	; 32
 ea8:	fc 01       	movw	r30, r24
 eaa:	e0 0f       	add	r30, r16
 eac:	f1 1f       	adc	r31, r17
 eae:	20 83       	st	Z, r18
			}

		}
		/***************************************************************************/

		for (u8 i = 0; i < 4; i++) {
 eb0:	8a 81       	ldd	r24, Y+2	; 0x02
 eb2:	8f 5f       	subi	r24, 0xFF	; 255
 eb4:	8a 83       	std	Y+2, r24	; 0x02
 eb6:	8a 81       	ldd	r24, Y+2	; 0x02
 eb8:	84 30       	cpi	r24, 0x04	; 4
 eba:	70 f3       	brcs	.-36     	; 0xe98 <main+0x264>

			arr_rec4[i] = UART_receiveByteSynch();
		}

		collector = 0;
 ebc:	1a 86       	std	Y+10, r1	; 0x0a
 ebe:	1b 86       	std	Y+11, r1	; 0x0b
 ec0:	1c 86       	std	Y+12, r1	; 0x0c
 ec2:	1d 86       	std	Y+13, r1	; 0x0d

		if (collector == 220) {
 ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
 ec6:	9b 85       	ldd	r25, Y+11	; 0x0b
 ec8:	ac 85       	ldd	r26, Y+12	; 0x0c
 eca:	bd 85       	ldd	r27, Y+13	; 0x0d
 ecc:	8c 3d       	cpi	r24, 0xDC	; 220
 ece:	91 05       	cpc	r25, r1
 ed0:	a1 05       	cpc	r26, r1
 ed2:	b1 05       	cpc	r27, r1
 ed4:	b9 f4       	brne	.+46     	; 0xf04 <main+0x2d0>

			for (u8 i = 0; i < 4; i++) {
 ed6:	19 82       	std	Y+1, r1	; 0x01
 ed8:	0e c0       	rjmp	.+28     	; 0xef6 <main+0x2c2>

				UART_sendByte(arr_serv4[i]);
 eda:	89 81       	ldd	r24, Y+1	; 0x01
 edc:	28 2f       	mov	r18, r24
 ede:	30 e0       	ldi	r19, 0x00	; 0
 ee0:	ce 01       	movw	r24, r28
 ee2:	49 96       	adiw	r24, 0x19	; 25
 ee4:	fc 01       	movw	r30, r24
 ee6:	e2 0f       	add	r30, r18
 ee8:	f3 1f       	adc	r31, r19
 eea:	80 81       	ld	r24, Z
 eec:	0e 94 43 05 	call	0xa86	; 0xa86 <UART_sendByte>

		collector = 0;

		if (collector == 220) {

			for (u8 i = 0; i < 4; i++) {
 ef0:	89 81       	ldd	r24, Y+1	; 0x01
 ef2:	8f 5f       	subi	r24, 0xFF	; 255
 ef4:	89 83       	std	Y+1, r24	; 0x01
 ef6:	89 81       	ldd	r24, Y+1	; 0x01
 ef8:	84 30       	cpi	r24, 0x04	; 4
 efa:	78 f3       	brcs	.-34     	; 0xeda <main+0x2a6>

				UART_sendByte(arr_serv4[i]);
			}
			DIO_WritePin(PINA0,HIGH);
 efc:	80 e0       	ldi	r24, 0x00	; 0
 efe:	61 e0       	ldi	r22, 0x01	; 1
 f00:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_WritePin>
 f04:	ff cf       	rjmp	.-2      	; 0xf04 <main+0x2d0>

00000f06 <_exit>:
 f06:	f8 94       	cli

00000f08 <__stop_program>:
 f08:	ff cf       	rjmp	.-2      	; 0xf08 <__stop_program>
